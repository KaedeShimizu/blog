<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Kaede的小窝</title>
  
  
  <link href="https://kaedehome.top/atom.xml" rel="self"/>
  
  <link href="https://kaedehome.top/"/>
  <updated>2023-04-16T00:43:11.465Z</updated>
  <id>https://kaedehome.top/</id>
  
  <author>
    <name>Kaede</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Github Page创建静态站点</title>
    <link href="https://kaedehome.top/2023/04/15/Github-Page%E5%88%9B%E5%BB%BA%E9%9D%99%E6%80%81%E7%AB%99%E7%82%B9/"/>
    <id>https://kaedehome.top/2023/04/15/Github-Page%E5%88%9B%E5%BB%BA%E9%9D%99%E6%80%81%E7%AB%99%E7%82%B9/</id>
    <published>2023-04-15T14:13:25.000Z</published>
    <updated>2023-04-16T00:43:11.465Z</updated>
    
    <content type="html"><![CDATA[<h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><p>创建静态站点前，你需要首先拥有一个Github账号，直接注册登录即可。</p><p>然后，你需要在自己的计算机上安装<code>Git</code>，可以直接前往<a href="https://git-scm.com/">官网</a>进行下载。</p><h1 id="相关设定"><a href="#相关设定" class="headerlink" title="相关设定"></a>相关设定</h1><h2 id="创建自己的仓库"><a href="#创建自己的仓库" class="headerlink" title="创建自己的仓库"></a>创建自己的仓库</h2><p>这个仓库的名称很特殊，假设你的用户名为<code>A</code>，那么这个仓库的名称为<code>A.github.io</code>。</p><p>创建完成后，打开仓库的Settings，选择Pages进行相关的配置，比如设定个人域名之类的。</p><h2 id="配置Git"><a href="#配置Git" class="headerlink" title="配置Git"></a>配置Git</h2><p>你拥有了一个静态网站，打开这个网站的文件夹，打开控制台。</p><p>首先，输入下面的指令，配置你自己的个人配置。这里的global表示的是全局配置，一次配置全局生效。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name A</span><br><span class="line">git config --global user.email A@gmail.com</span><br></pre></td></tr></table></figure><h2 id="配置SSH"><a href="#配置SSH" class="headerlink" title="配置SSH"></a>配置SSH</h2><p>SSH可以理解为一种密钥，主要是帮助Github判断是否是你本人用的。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;A@gmail.com&quot;</span></span><br></pre></td></tr></table></figure><p>会提示你输入一些东西，不过这些东西都不用管，直接按两下空格就行。</p><p>然后，通过cat指令查看刚刚生成的文件的内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure><p>复制输出的所有内容，回到Github。先点击右上角自己的头像，选择settings，在弹出的页面当中选择SSH and GPG keys，再点击右上角的New SSH key，起一个名字再把刚才复制的内容粘贴进去即可。</p><h2 id="关联本地文件夹与远程仓库"><a href="#关联本地文件夹与远程仓库" class="headerlink" title="关联本地文件夹与远程仓库"></a>关联本地文件夹与远程仓库</h2><p>在网站文件夹中，输入<code>git init</code>进行初始化，随后进行链接自己的仓库：<code>git remote add origin git@github.com:moutsea/git-tutorial.git</code>，这个链接其实就是仓库的地址。</p><p>随后，使用命令把分支进行关联，这里的main可以是其他分支，根据具体情况使用。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch --set-upstream-to=origin/main main</span><br></pre></td></tr></table></figure><h2 id="提交文件"><a href="#提交文件" class="headerlink" title="提交文件"></a>提交文件</h2><p>首先，你需要提交以下文件，使用add命令全部提交即可：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br></pre></td></tr></table></figure><p>然后，使用commit命令，设置本次提交的说明：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m <span class="string">&quot;提交的说明&quot;</span></span><br></pre></td></tr></table></figure><p>然后使用强制提交进行提交即可，因为静态网站，不需要管其他的什么。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push -u origin main -f</span><br></pre></td></tr></table></figure><h2 id="让Github-Deploy一下"><a href="#让Github-Deploy一下" class="headerlink" title="让Github Deploy一下"></a>让Github Deploy一下</h2><p>回到Github的仓库，打开Actions选项卡，选择<code>New workflow</code>，往下滑找到<code>Static HTML</code>，点击<code>Configure</code>即可，后面就是确定，点绿色按钮就行√</p><p>等待编译完成后，打开你设定好的网址，或者直接<code>A.github.io</code>，就可以访问自己的静态网站啦~</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>完成第一次工作后，就很简单了：</p><ol><li>编写网页</li><li>git add添加，git commit设置，git pull提交</li><li>Github去Deploy一下</li></ol><p>就是三步走而已</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;准备工作&quot;&gt;&lt;a href=&quot;#准备工作&quot; class=&quot;headerlink&quot; title=&quot;准备工作&quot;&gt;&lt;/a&gt;准备工作&lt;/h1&gt;&lt;p&gt;创建静态站点前，你需要首先拥有一个Github账号，直接注册登录即可。&lt;/p&gt;
&lt;p&gt;然后，你需要在自己的计算机上安装&lt;co</summary>
      
    
    
    
    <category term="前端开发" scheme="https://kaedehome.top/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="技术" scheme="https://kaedehome.top/tags/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="网站" scheme="https://kaedehome.top/tags/%E7%BD%91%E7%AB%99/"/>
    
    <category term="Github" scheme="https://kaedehome.top/tags/Github/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://kaedehome.top/2023/04/15/hello-world/"/>
    <id>https://kaedehome.top/2023/04/15/hello-world/</id>
    <published>2023-04-15T08:19:33.403Z</published>
    <updated>2023-04-16T00:43:30.874Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h2><p>这是一切的开始，这时一切的起点。</p><p>记录生活，从现在开始！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Hello-World&quot;&gt;&lt;a href=&quot;#Hello-World&quot; class=&quot;headerlink&quot; title=&quot;Hello World&quot;&gt;&lt;/a&gt;Hello World&lt;/h2&gt;&lt;p&gt;这是一切的开始，这时一切的起点。&lt;/p&gt;
&lt;p&gt;记录生活，从现在开始</summary>
      
    
    
    
    <category term="生活日常" scheme="https://kaedehome.top/categories/%E7%94%9F%E6%B4%BB%E6%97%A5%E5%B8%B8/"/>
    
    
    <category term="杂谈" scheme="https://kaedehome.top/tags/%E6%9D%82%E8%B0%88/"/>
    
  </entry>
  
  <entry>
    <title>Hexo博客系统的使用</title>
    <link href="https://kaedehome.top/2023/04/15/Hexo%E5%8D%9A%E5%AE%A2%E7%B3%BB%E7%BB%9F%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>https://kaedehome.top/2023/04/15/Hexo%E5%8D%9A%E5%AE%A2%E7%B3%BB%E7%BB%9F%E7%9A%84%E4%BD%BF%E7%94%A8/</id>
    <published>2023-04-15T02:08:08.000Z</published>
    <updated>2023-04-16T00:42:59.602Z</updated>
    
    <content type="html"><![CDATA[<h1 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h1><p><code>Solo</code>，<code>WordPress</code>，要么就是需要登录系统，要么就是需要安装一堆的插件来维护。对于我这种只是需要一个稳定，本地且可分享的写作平台的人，我还是选择使用Hexo进行写作。主要原因有：</p><ol><li>所有文章为本地的MarkDown文件，不容易出现数据丢失的情况</li><li>可以非常方便的转换为静态站点，并进行发布</li><li>符合程序员的使用习惯，同时自定义性比较高，可以自行修改代码，优化博客</li></ol><h1 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>首先，在电脑上安装Nodejs，然后打开一个终端，按顺序输入下列指令：(#代表注释，不用输入)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g <span class="comment"># 安装Hexo</span></span><br><span class="line">hexo init blog <span class="comment"># 初始化一个博客文件夹，会自动创建一个文件夹的</span></span><br><span class="line"><span class="built_in">cd</span> blog <span class="comment"># 进入文件夹</span></span><br><span class="line">npm install <span class="comment"># 安装依赖项</span></span><br><span class="line">hexo server <span class="comment"># 启动博客</span></span><br></pre></td></tr></table></figure><p>完成上述步骤以后，终端会给你一个本地链接，大概样子为<code>localhost:XXXX</code>，直接在浏览器中打开，就可以看到自己的博客啦！</p><h2 id="写博客"><a href="#写博客" class="headerlink" title="写博客"></a>写博客</h2><p>打开博客文件夹<code>blog</code>，你会找到一个<code>source</code>文件夹，这个文件夹会存放你的页面，博客以及草稿。在blog文件夹中打开终端，输入如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new post 文章名称</span><br></pre></td></tr></table></figure><p>等待创建完成，即可在<code>source/_posts/</code>文件夹下面找到你的博客文件，直接进行书写即可(使用MarkDown语法，这里不做解释)</p><p>当然，也有和MarkDown不太一样的地方，在每个博客的开头有如下代码片段：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: Hello World</span><br><span class="line">date: 2023/4/15</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>这是Hexo的Front-matter，具体使用见<a href="https://hexo.io/zh-cn/docs/front-matter">官方链接</a>。这个东西的用途其实就是告诉Hexo这篇文章的一些性质，比如title文章标题，date编辑日期等等。</p><h2 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h2><p>如果一开始博客的样子不好看，那么可以自行更换主题，打开博客文件夹<code>blog</code>下的<code>_config.yml</code>文件，找到theme设置项，你会看到上面官方给了链接，点进去查看下载即可。</p><h3 id="具体下载步骤："><a href="#具体下载步骤：" class="headerlink" title="具体下载步骤："></a>具体下载步骤：</h3><ol><li>进入官方主题库</li><li>选择合适的主题，进入对于的Github仓库</li><li>直接下载仓库，或者选择对应的release版本下载</li><li>下载到本地，解压缩到themes文件夹中，比方说下载的主题是A，那么这时博客目录为<code>blog/themes/A/主题文件</code></li><li>打开config文件，将theme冒号后面改为A即可</li></ol><h2 id="主题的自定义"><a href="#主题的自定义" class="headerlink" title="主题的自定义"></a>主题的自定义</h2><p>一般来说，下载后的主题中也是有一个config文件的，直接打开按照注释修改即可；这里只记录一些特殊情况</p><ol><li>主题文件中，如果需要使用本地图片，那么图片的路径为<code>/img/A.jpg</code>，这里的img绝对路径为<code>C:XXXX/blog/themes/A/source/img</code>，当然，也可以直接使用链接</li><li>博客中的<code>Home: /</code>配置，Home可以是任何字符，中文也是可以的。</li><li>一定要<strong>仔细阅读注释</strong>，别人的主题，当然要相信别人的注释，不然自己研究是研究不透的！</li></ol><h2 id="友链页面-Tags页面的制作"><a href="#友链页面-Tags页面的制作" class="headerlink" title="友链页面/Tags页面的制作"></a>友链页面/Tags页面的制作</h2><p>有的时候你会看到页面无法显示，只会告诉你<code>Cannot get /tags/</code>之类的话。其实这就是因为找不到这个页面，直接创建即可。这里介绍两种最常见的页面。</p><h3 id="创建tags页面"><a href="#创建tags页面" class="headerlink" title="创建tags页面"></a>创建tags页面</h3><p>首先，直接blog目录中控制台，输入下面内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建一个页面</span></span><br><span class="line">hexo new page <span class="string">&quot;tags&quot;</span></span><br></pre></td></tr></table></figure><p>然后打开tags文件夹，修改index.md的内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">type: &quot;tags&quot;</span><br><span class="line">layout: &quot;tags&quot;</span><br><span class="line">comments: false</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>然后，就可以正常通过<code>/tags/</code>访问啦。</p><h3 id="创建categories页面"><a href="#创建categories页面" class="headerlink" title="创建categories页面"></a>创建categories页面</h3><p>同理，但是不需要这么多东西，首先命令创建页面</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page <span class="string">&quot;categories&quot;</span></span><br></pre></td></tr></table></figure><p>然后修改index文件为:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">type: categories</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>即可。</p><h2 id="导出为静态页面"><a href="#导出为静态页面" class="headerlink" title="导出为静态页面"></a>导出为静态页面</h2><p>这一步其实就是相当于发布了，可以直接查看官方的方法，一键包什么的，或者直接通过一条命令转换，也很简单：<code>hexo g</code></p><h1 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h1><p>那么，现在你可以正常进行写作，创作啦！这里我只进行了简单的介绍，如果需要了解更多可以去看官方文档，文档会提供更多的技巧</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;引入&quot;&gt;&lt;a href=&quot;#引入&quot; class=&quot;headerlink&quot; title=&quot;引入&quot;&gt;&lt;/a&gt;引入&lt;/h1&gt;&lt;p&gt;&lt;code&gt;Solo&lt;/code&gt;，&lt;code&gt;WordPress&lt;/code&gt;，要么就是需要登录系统，要么就是需要安装一堆的插件来维护。对</summary>
      
    
    
    
    <category term="前端开发" scheme="https://kaedehome.top/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="技术" scheme="https://kaedehome.top/tags/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="博客" scheme="https://kaedehome.top/tags/%E5%8D%9A%E5%AE%A2/"/>
    
    <category term="Hexo" scheme="https://kaedehome.top/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>解决Nginx下WordPress Nginx 404的问题</title>
    <link href="https://kaedehome.top/2023/04/15/%E8%A7%A3%E5%86%B3Nginx%E4%B8%8BWordPress-Nginx-404%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>https://kaedehome.top/2023/04/15/%E8%A7%A3%E5%86%B3Nginx%E4%B8%8BWordPress-Nginx-404%E7%9A%84%E9%97%AE%E9%A2%98/</id>
    <published>2023-04-15T01:54:57.000Z</published>
    <updated>2023-04-16T00:45:08.427Z</updated>
    
    <content type="html"><![CDATA[<h1 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h1><p>wordpress官方的伪静态是通过.htaccess实现的，但nginx并不支持.htaccess。</p><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p>通过伪静态解决问题，这里以PHPStudy举例子，直接在网站-管理-伪静态输入下面的内容即可</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">location / &#123;</span><br><span class="line">        <span class="keyword">if</span> (-f <span class="variable">$request_filename</span>/index.html)&#123;</span><br><span class="line">               <span class="title function_ invoke__">rewrite</span> (.*) $<span class="number">1</span>/index.html <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (-f <span class="variable">$request_filename</span>/index.php)&#123;</span><br><span class="line">               <span class="title function_ invoke__">rewrite</span> (.*) $<span class="number">1</span>/index.php;</span><br><span class="line">         &#125;</span><br><span class="line">        <span class="keyword">if</span> (!-f <span class="variable">$request_filename</span>)&#123;</span><br><span class="line">               <span class="title function_ invoke__">rewrite</span> (.*) /index.php;</span><br><span class="line">         &#125;</span><br><span class="line">&#125;</span><br><span class="line">rewrite /wp-admin$ <span class="variable">$scheme</span>:<span class="comment">//$host$uri/ permanent;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;原因&quot;&gt;&lt;a href=&quot;#原因&quot; class=&quot;headerlink&quot; title=&quot;原因&quot;&gt;&lt;/a&gt;原因&lt;/h1&gt;&lt;p&gt;wordpress官方的伪静态是通过.htaccess实现的，但nginx并不支持.htaccess。&lt;/p&gt;
&lt;h1 id=&quot;解决方案&quot;&gt;</summary>
      
    
    
    
    <category term="编程技术" scheme="https://kaedehome.top/categories/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="技术" scheme="https://kaedehome.top/tags/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="博客" scheme="https://kaedehome.top/tags/%E5%8D%9A%E5%AE%A2/"/>
    
    <category term="WordPress" scheme="https://kaedehome.top/tags/WordPress/"/>
    
  </entry>
  
</feed>
