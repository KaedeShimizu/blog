import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{r as t,o as p,c as o,b as n,d as s,a as c,e as i}from"./app-21d4bb55.js";const l="/assets/1-1694333139183-35-55eeb60f.png",u="/assets/2-1694333145409-37-fdb01bf7.png",r="/assets/3-1694333150789-39-217fbb09.png",d="/assets/4-1694333156513-41-88622c59.png",k="/assets/5-1694333164041-43-4663bc48.png",v="/assets/6-1694333169626-45-ed2a268b.png",g="/assets/7-1694333174960-47-c6a8b153.png",f={},m=n("p",null,"众所周知，Pixiv在国内是无法正常访问的，那么自然就需要进行反向代理之类的操作~",-1),h=n("p",null,"Cloudflare Workers就是一个不错的选择呢，下面直接开始吧~",-1),b=n("h2",{id:"注册账号",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#注册账号","aria-hidden":"true"},"#"),s(" 注册账号")],-1),_={href:"https://dash.cloudflare.com/sign-up",target:"_blank",rel:"noopener noreferrer"},x=i('<figure><img src="'+l+'" alt="1" tabindex="0" loading="lazy"><figcaption>1</figcaption></figure><p>注册完成后稍微等一会，就能进入到主界面哩：</p><figure><img src="'+u+'" alt="2" tabindex="0" loading="lazy"><figcaption>2</figcaption></figure><h2 id="使用workers" tabindex="-1"><a class="header-anchor" href="#使用workers" aria-hidden="true">#</a> 使用Workers</h2><p>直接找到左边侧边栏的Workers选项卡：</p><figure><img src="'+r+'" alt="3" tabindex="0" loading="lazy"><figcaption>3</figcaption></figure><p>随后点击创建一个<code>Workers</code>就好，你会看到一个代码界面如下图：</p><figure><img src="'+d+`" alt="4" tabindex="0" loading="lazy"><figcaption>4</figcaption></figure><p>随后点击继续，因为要部署以后才能修改代码；部署结束，点击修改代码为如下代码：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token constant">REFERER</span> <span class="token operator">=</span> <span class="token string">&#39;https://www.pixiv.net/&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token constant">USER_AGENT</span> <span class="token operator">=</span> <span class="token string">&#39;Cloudflare Workers&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">handleRequest</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>request<span class="token punctuation">.</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>
  url<span class="token punctuation">.</span>hostname <span class="token operator">=</span> <span class="token string">&quot;i.pximg.net&quot;</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> cache <span class="token operator">=</span> caches<span class="token punctuation">.</span>default<span class="token punctuation">;</span>
  <span class="token keyword">const</span> cacheKey <span class="token operator">=</span> event<span class="token punctuation">.</span>request<span class="token punctuation">;</span>
  <span class="token keyword">let</span> response <span class="token operator">=</span> <span class="token keyword">await</span> cache<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>cacheKey<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>response<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Request</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> event<span class="token punctuation">.</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>
    request<span class="token punctuation">.</span>headers<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&#39;Referer&#39;</span><span class="token punctuation">,</span> <span class="token constant">REFERER</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    request<span class="token punctuation">.</span>headers<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&#39;User-Agent&#39;</span><span class="token punctuation">,</span> <span class="token constant">USER_AGENT</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">const</span> responseClone <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    event<span class="token punctuation">.</span><span class="token function">waitUntil</span><span class="token punctuation">(</span>cache<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>cacheKey<span class="token punctuation">,</span> responseClone<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> response<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;fetch&quot;</span><span class="token punctuation">,</span> <span class="token parameter">event</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  event<span class="token punctuation">.</span><span class="token function">respondWith</span><span class="token punctuation">(</span><span class="token function">handleRequest</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面是一张原本图片的地址，可以把<code>{{url}}</code>换成自己的地址试一试？成功了的话那就恭喜啦~</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>https://{{url}}/img-master/img/2021/06/10/18/09/04/90457556_p0_master1200.jpg
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="绑定域名" tabindex="-1"><a class="header-anchor" href="#绑定域名" aria-hidden="true">#</a> 绑定域名</h2><p>貌似现在CloudFlare已经被墙了，建议绑定自己的域名。下面直接介绍如何绑定自己的域名吧~</p><h3 id="购买获取一个域名" tabindex="-1"><a class="header-anchor" href="#购买获取一个域名" aria-hidden="true">#</a> 购买获取一个域名</h3><p>这个我不在这里多说了吧，自己去买就好，阿里云啊什么的都可以~</p><h3 id="新建一个dns解析" tabindex="-1"><a class="header-anchor" href="#新建一个dns解析" aria-hidden="true">#</a> 新建一个DNS解析</h3><p>注意，这个要在CloudFlare里面设置，找到一个下面这样的页面进行设置就好：</p><figure><img src="`+k+'" alt="5" tabindex="0" loading="lazy"><figcaption>5</figcaption></figure><p>然后你应当新建一个新的DNS解析，名称无所谓，主要是一定要打开代理（小黄云）</p><h3 id="关联域名" tabindex="-1"><a class="header-anchor" href="#关联域名" aria-hidden="true">#</a> 关联域名</h3><p>回到刚刚CloudFlare Workers的地方，点击添加一个路由：</p><figure><img src="'+v+'" alt="6" tabindex="0" loading="lazy"><figcaption>6</figcaption></figure><p>路由填写上一步的子域名 + <code>&#39;/*&#39;</code></p><p>比如我刚刚DNS解析的域名是<code>gh.xxxxx.cf</code>，那在路由一栏则填写<code>gh.xxxxx.cf/*</code>，服务选择需要自定义域名访问的Worker，类似于下面这样子：</p><figure><img src="'+g+'" alt="7" tabindex="0" loading="lazy"><figcaption>7</figcaption></figure><p>现在应该已经可以通过这个自定义域名访问啦~</p>',27);function y(w,q){const a=t("ExternalLinkIcon");return p(),o("div",null,[m,h,b,n("p",null,[s("这个其实很简单，只是容易找不到注册的网址，直接访问"),n("a",_,[s("这个"),c(a)]),s("吧，会自动跳转到注册网址，如下图：")]),x])}const C=e(f,[["render",y],["__file","Cloudflare实现Pixiv反代.html.vue"]]);export{C as default};
